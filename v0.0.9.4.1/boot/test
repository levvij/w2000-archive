#!/usr/bin/node

(async () => {
	const puppeteer = require("/usr/lib/node_modules/puppeteer");
	const fs = require("fs");

	const config = {};
	eval(fs.readFileSync("fs/c/windows/ime/gen/version.js").toString());

	console.log("testing version " + config.version);
	
	const path = "../win-versions/v" + config.version + "/";
	if (fs.existsSync(path)) {
		for (let file of fs.readdirSync(path)) {
			fs.unlinkSync(path + "/" + file);
		}
	} else {
		fs.mkdirSync(path);
	}

	const browser = await puppeteer.launch();
	const page = await browser.newPage();
	
	await page.setViewport({
		width: 1024,
		height: 768
	});
	
	console.log("loading page");
	
	await page.goto("https://dotcdn.us/win-beta/", {
		waitUntil: "networkidle2"
	});
	
	await page.evaluate("localStorage.clear()");
	
	await page.goto("https://dotcdn.us/win-beta/", {
		waitUntil: "networkidle2"
	});
	
	console.log("taking initial screenshot");
	
	await page.screenshot({
		fullPage: true,
		path: path + "screenshot-initial.png"
	});
	
	const screenshotApplication = (line, name) => {
		const p = line.split(" ").slice(1).join(" ");
		const info = line.split(" ")[0].split(";");
	
		console.log("screenshotting " + p);
		
		return new Promise(async done => {
			await page.evaluate("config._ = null");
			await page.evaluate("Application.run('" + p.split(" ").join("', '") + "').then(() => config._ = true)");
			
			const next = async () => {
				if (await page.evaluate("config._")) {
					const inext = async () => {
						if (await page.evaluate("Window.activeWindow")) {
							if (info.length > 1) {
								await page.evaluate("Window.activeWindow.x = " + info[1]);
								await page.evaluate("Window.activeWindow.y = " + info[2]);

								if (info[3]) {
									await page.evaluate("Window.activeWindow.width = " + info[3]);
									await page.evaluate("Window.activeWindow.height = " + info[4]);
								}
							}

							await page.screenshot({
								fullPage: true,
								path: path + "screenshot-" + name + ".png"
							});

							if (info[0] == "-") {
								await page.evaluate("Window.instances.map(i => i.close())");
							}

							done();
						} else {
							setTimeout(inext, 10);
						}
					};
					
					inext();
				} else {
					setTimeout(next, 10);
				}
			};
			
			next();
		});
	};
	
	let lastlog = "";
	const checklog = async () => {
		try {
			const l = (await page.evaluate("globalConsole.output")).replace(lastlog, "");
			
			if (l) {
				console.log("\x1b[33m>> " + l.trim().split("\n").join("\n>> ") + "\x1b[0m");
				lastlog += l;
			}
			
			setTimeout(() => checklog());
		} catch (e) {}
	};
	
	checklog();
	
	const next = async () => {
		if (await page.evaluate("config.loaded")) {
			console.log("logging globalConsole");
			fs.writeFileSync(path + "/initial.log", await page.evaluate("globalConsole.output"));
		
			console.log("fully loaded\ntaking desktop screenshot");
			
			await page.screenshot({
				fullPage: true,
				path: path + "screenshot-desktop.png"
			});
			
			for (let program of fs.readFileSync("tests/programs").toString().split("\n").filter(c => c.trim())) {
				await screenshotApplication(program, program.split("/").pop());
			}
			
			await page.setViewport({
				width: 600,
				height: 500
			});
			
			await screenshotApplication("+;150;100 c/windows/system32/wininfo.exe", "cover");
			
			await page.setViewport({
				width: 1024,
				height: 768
			});
			
			console.log("logging globalConsole");
			fs.writeFileSync(path + "/final.log", await page.evaluate("globalConsole.output"));
			
			await browser.close();
		} else {
			setTimeout(next, 100);
		}
	};
	
	console.log("waiting for full load");
	next();
})();